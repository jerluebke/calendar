!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDED	calendar/calendar/main.cpp	/^std::string ADDED = "Termin wurde hinzugefuegt!\\n";$/;"	v
ENTER_DATE	calendar/calendar/main.cpp	/^std::string ENTER_DATE = "Gebe ein Datum ein (dd\/mm\/yyyy):\\n";$/;"	v
ENTER_ENDDATE	calendar/calendar/main.cpp	/^std::string ENTER_ENDDATE = "Gebe das Enddatum ein (dd\/mm\/yyyy):\\n";$/;"	v
ENTER_ENDTIME	calendar/calendar/main.cpp	/^std::string ENTER_ENDTIME = "Gebe eine Uhrzeit des Enddatums ein (hh:mm):\\n";$/;"	v
ENTER_TIME	calendar/calendar/main.cpp	/^std::string ENTER_TIME = "Gebe eine Uhrzeit ein (hh:mm):\\n";$/;"	v
Event	calendar/calendar/Event.cpp	/^Event::Event(const time_t startPoint, const time_t endPoint, const std::string title)$/;"	f	class:Event
Event	calendar/calendar/Event.h	/^class Event {$/;"	c
INPUT_INVALID	calendar/calendar/main.cpp	/^std::string INPUT_INVALID = "Eingabe nicht unterstuetzt!\\n";$/;"	v
NOT_ADDED	calendar/calendar/main.cpp	/^std::string NOT_ADDED = "Es wurde kein Termin hinzugefuegt!\\n";$/;"	v
NO_TITLE	calendar/calendar/main.cpp	/^std::string NO_TITLE = "Ungueltige Eingabe: Kein Titel!\\n";$/;"	v
PROMPT	calendar/calendar/main.cpp	/^std::string PROMPT = "\\nFuer beenden: 7 zurueck zum Kalender: 0\\n";$/;"	v
TOO_EARLY	calendar/calendar/main.cpp	/^std::string TOO_EARLY =$/;"	v
dateChecker	calendar/calendar/conv_util.cpp	/^auto dateChecker = make_checker(dateRe);$/;"	v
dateInRange	calendar/calendar/conv_util.cpp	/^bool dateInRange(std::vector<int> tokens)$/;"	f
dateIsValid	calendar/calendar/conv_util.cpp	/^auto dateIsValid = inputIsValid(dateChecker, dateInRange);$/;"	v
dayIsValid	calendar/calendar/conv_util.cpp	/^bool dayIsValid(const int day, const int month)$/;"	f
error	calendar/calendar/main.cpp	/^void error(std::string msg)$/;"	f
get_endPoint	calendar/calendar/Event.cpp	/^time_t Event::get_endPoint() const {$/;"	f	class:Event
get_startPoint	calendar/calendar/Event.cpp	/^time_t Event::get_startPoint() const {$/;"	f	class:Event
get_title	calendar/calendar/Event.cpp	/^std::string Event::get_title() const {$/;"	f	class:Event
get_tokens	calendar/calendar/checker.cpp	/^std::vector<int> get_tokens(std::string input)$/;"	f
gruss	calendar/calendar/main.cpp	/^std::string gruss =$/;"	v
hoursIsValid	calendar/calendar/conv_util.cpp	/^auto hoursIsValid = isValid(0, 23);$/;"	v
inputIsValid	calendar/calendar/checker.cpp	/^std::function<bool(std::string, std::vector<int>)> inputIsValid($/;"	f
invalidInput	calendar/calendar/main.cpp	/^void invalidInput(std::string msg = "")$/;"	f
isValid	calendar/calendar/checker.cpp	/^std::function<bool(const int)> isValid(const int start, const int end)$/;"	f
m_endPoint	calendar/calendar/Event.h	/^    const time_t m_endPoint;$/;"	m	class:Event
m_startPoint	calendar/calendar/Event.h	/^    const time_t m_startPoint;$/;"	m	class:Event
m_title	calendar/calendar/Event.h	/^    const std::string m_title;$/;"	m	class:Event
main	calendar/calendar/main.cpp	/^int main() {$/;"	f
make_checker	calendar/calendar/checker.cpp	/^std::function<bool(std::string)> make_checker(std::regex re)$/;"	f
minutesIsValid	calendar/calendar/conv_util.cpp	/^auto minutesIsValid = isValid(0, 59);$/;"	v
monthIsValid	calendar/calendar/conv_util.cpp	/^auto monthIsValid = isValid(1, 12);$/;"	v
promptForDate	calendar/calendar/main.cpp	/^void promptForDate(time_t &storage, std::string datetime="",$/;"	f
stringToTime	calendar/calendar/conv_util.cpp	/^std::time_t stringToTime (std::string date, std::string time)$/;"	f
timeChecker	calendar/calendar/conv_util.cpp	/^auto timeChecker = make_checker(timeRe);$/;"	v
timeInRange	calendar/calendar/conv_util.cpp	/^bool timeInRange(std::vector<int> tokens)$/;"	f
timeIsValid	calendar/calendar/conv_util.cpp	/^auto timeIsValid = inputIsValid(timeChecker, timeInRange);$/;"	v
timeToString	calendar/calendar/conv_util.cpp	/^std::string timeToString (std::time_t time)$/;"	f
yearIsValid	calendar/calendar/conv_util.cpp	/^auto yearIsValid = isValid(1970, 2050);$/;"	v
